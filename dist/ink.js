module.exports=function(t){function e(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var n={};return e.m=t,e.c=n,e.i=function(t){return t},e.d=function(t,n,o){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:o})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=6)}([function(t,e,n){function o(t){return l(t.duration,Date.now()-t.mouseDown)}function r(t){return t.mouseUp>0?Date.now()-t.mouseUp:0}function i(t){var e=t.duration,n=t.radius,i=.85*a(o(t),0,n,e),u=.15*a(r(t),0,n,e),l=.02*n*c(Date.now()/e);return s(0,i+u+l)}var a=n(7),u=Math.sqrt(2),c=Math.cos,s=Math.max,l=Math.min;t.exports={getMaxRadius:function(t,e,n){return l(.5*s(t,e),n)},getBlotOpacity:function(t,e){return a(r(t),e,-e,t.duration)},getBlotOuterOpacity:function(t,e){return l(this.getBlotOpacity(t,e),a(o(t),0,.3,3*t.duration))},getBlotShiftX:function(t,e,n){return l(1,i(t)/e*2/u)*(n/2-t.x)},getBlotShiftY:function(t,e,n){return l(1,i(t)/e*2/u)*(n/2-t.y)},getBlotScale:function(t){return i(t)/t.radius}}},function(t,e){t.exports={borderRadius:"inherit",height:"100%",left:0,position:"absolute",top:0,width:"100%"}},function(t,e){var n=!1;"undefined"!=typeof window&&(n="ontouchstart"in window||window.DocumentTouch&&document instanceof window.DocumentTouch),t.exports=n},function(t,e){t.exports=function(t){return(window.devicePixelRatio||1)/(t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||t.backingStorePixelRatio||1)}},function(t,e,n){var o=n(0),r=function(t){var e=t.mouseUp,n=t.duration;return!e||Date.now()-e<n};t.exports=function(t){var e=[],n=!1,i=void 0,a={each:function(t,n){for(var o=0,r=e.length;o<r;o++)t.call(n,e[o])},play:function(){n||(n=!0,a.update())},stop:function(){n=!1,cancelAnimationFrame(i)},getTotalOpacity:function(t){for(var n=0,r=0,i=e.length;r<i;r++)n+=o.getBlotOuterOpacity(e[r],t);return n},update:function(){e=e.filter(r),e.length?i=requestAnimationFrame(a.update):a.stop(),t()},add:function(t){e.push(t),a.play()},release:function(t){for(var n=e.length-1;n>=0;n--)if(!e[n].mouseUp)return e[n].mouseUp=t}};return a}},function(t,e){t.exports=require("react")},function(t,e,n){function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function r(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var a=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t},u=n(2),c=0,s=n(3),l=n(5),p=n(1),f=n(4),h=2*Math.PI,d=n(0),g=function(t){function e(n){o(this,e);var i=r(this,t.apply(this,arguments));return i.tick=function(){var t=i.state,e=t.ctx,n=t.color,o=t.density,r=t.height,a=t.width,u=t.store;e.save(),e.scale(o,o),e.clearRect(0,0,a,r),e.fillStyle=n,i.props.background&&(e.globalAlpha=u.getTotalOpacity(i.props.opacity),e.fillRect(0,0,a,r)),u.each(i.makeBlot,i),e.restore()},i._getCenter=function(){var t=i.canvas,e=t.getBoundingClientRect(),n=e.top,o=e.bottom,r=e.left;return{clientX:r+(e.right-r)/2,clientY:n+(o-n)/2}},i._onPress=function(t){var e=i.props.center,n=t.button,o=t.ctrlKey,r=t.clientX,a=t.clientY,u=t.changedTouches,s=Date.now();if(u)if(e){var l=i._getCenter(),p=l.clientX,f=l.clientY;i.pushBlot(s,p,f)}else for(var h=0;h<u.length;h++){var d=u[h],g=d.clientX,y=d.clientY;i.pushBlot(s,g,y)}else if(n===c&&!o)if(e){var v=i._getCenter(),w=v.clientX,m=v.clientY;i.pushBlot(s,w,m)}else i.pushBlot(s,r,a)},i._onRelease=function(){i.state.store.release(Date.now())},i.state={color:"transparent",density:1,height:0,store:f(i.tick),touchEvents:i.touchEvents(),width:0},i}return i(e,t),e.prototype.touchEvents=function(){return this.props.hasTouch?{onTouchStart:this._onPress,onTouchEnd:this._onRelease,onTouchCancel:this._onRelease}:{onMouseDown:this._onPress,onMouseUp:this._onRelease,onMouseLeave:this._onRelease}},e.prototype.makeBlot=function(t){var e=this.state,n=e.ctx,o=e.height,r=e.width,i=t.x,a=t.y,u=t.radius;if(n.globalAlpha=d.getBlotOpacity(t,this.props.opacity),n.beginPath(),this.props.recenter){var c=Math.max(o,r);i+=d.getBlotShiftX(t,c,r),a+=d.getBlotShiftY(t,c,o)}n.arc(i,a,u*d.getBlotScale(t),0,h),n.closePath(),n.fill()},e.prototype.componentWillUnmount=function(){this.state.store.stop()},e.prototype.pushBlot=function(t,e,n){var o=this,r=this.canvas;r instanceof window.HTMLCanvasElement==!1&&(r=r.getDOMNode());var i=r.getBoundingClientRect(),a=i.top,u=i.bottom,c=i.left,l=i.right,p=window.getComputedStyle(r),f=p.color,h=this.state.ctx||r.getContext("2d"),g=s(h),y=u-a,v=l-c,w=d.getMaxRadius(y,v,this.props.radius);this.setState({color:f,ctx:h,density:g,height:y,width:v},function(){o.state.store.add({duration:o.props.duration,mouseDown:t,mouseUp:0,radius:w,x:e-c,y:n-a})})},e.prototype.render=function(){var t=this,e=this.state,n=e.density,o=e.height,r=e.width,i=e.touchEvents;return l.createElement("canvas",a({className:"ink",ref:function(e){return t.canvas=e},style:a({},p,this.props.style),height:o*n,width:r*n,onDragOver:this._onRelease},i))},e}(l.PureComponent);g.defaultProps={background:!0,duration:1e3,opacity:.25,radius:150,recenter:!0,hasTouch:u,center:!1},t.exports=g},function(t,e){t.exports=function(t,e,n,o){return n*((t=t/o-1)*t*t*t*t+1)+e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,